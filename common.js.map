{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;;;;;;AAEkH;;;AAGlH,MAGaK,aAAa;EAgBxBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAhBd;IACA;IAEA;IACA;IACA,KAAAC,OAAO,GAAG,wBAAwB;IAClC,KAAAC,iBAAiB,GAAG,IAAIT,iDAAe,CAAS,CAAC,CAAC;IAClD,KAAAU,iBAAiB,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;IAEzD,KAAAC,iBAAiB,GAAG,IAAIZ,iDAAe,CAAS,KAAK,CAAC;IACtD,KAAAa,iBAAiB,GAAG,IAAI,CAACD,iBAAiB,CAACD,YAAY,EAAE;IAEzD,KAAAG,eAAe,GAAG,IAAId,iDAAe,CAAS,EAAE,CAAC;IACjD,KAAAe,eAAe,GAAG,IAAI,CAACD,eAAe,CAACH,YAAY,EAAE;IAMrD,KAAAK,WAAW,GAAGd,mDAAa,CAAC,CAC1B,IAAI,CAACQ,iBAAiB,EACtB,IAAI,CAACG,iBAAiB,EACtB,IAAI,CAACE,eAAe,CACrB,CAAC,CAACE,IAAI,CACLd,yCAAG,CAAC,CAAC,CAACe,UAAU,EAAEC,UAAU,EAAEC,QAAQ,CAAC,MAAM;MAAEF,UAAU;MAAEC,UAAU;MAAEC;IAAQ,CAAE,CAAC,CAAC,CACpF;IAED,KAAAC,eAAe,GAAGnB,mDAAa,CAAC,CAC9B,IAAI,CAACc,WAAW,CACjB,CAAC,CAACC,IAAI,CACLb,+CAAS,CAAC,CAAC,CAACkB,SAAS,CAAC,KAAI;MACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACf,OAAO,OAAOc,SAAS,CAACH,UAAU,SAASG,SAAS,CAACJ,UAAU,aAAaI,SAAS,CAACF,QAAQ,EAAE;MACpH,OAAO,IAAI,CAACb,IAAI,CAACiB,GAAG,CAAkBD,GAAG,CAAC;IAC5C,CAAC,CAAC,CACH;IAED,KAAAE,qBAAqB,GAAG,IAAI,CAACJ,eAAe,CAACJ,IAAI,CAC/Cd,yCAAG,CAAEuB,IAAI,KAAM;MACb,GAAGA,IAAI;MACPC,MAAM,EAAED,IAAI,CAACC,MAAM,EAAEC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;QACjC;QACA,MAAMC,KAAK,GAAGC,QAAQ,CAACH,CAAC,CAACI,IAAI,EAAE,EAAE,CAAC;QAClC,MAAMC,KAAK,GAAGF,QAAQ,CAACF,CAAC,CAACG,IAAI,EAAE,EAAE,CAAC;QAElC;QACA,OAAOC,KAAK,GAAGH,KAAK;MACtB,CAAC;KACF,CAAoB,CACpB,CACF;EAhCG;EAkCJI,uBAAuBA,CAACC,eAAuB;IAC7C,IAAIA,eAAe,EAAE;MACnB,MAAMb,GAAG,GAAG,GAAG,IAAI,CAACf,OAAO,OAAO4B,eAAe,EAAE;MACnD,OAAO,IAAI,CAAC7B,IAAI,CAACiB,GAAG,CAAgBD,GAAG,CAAC;KACzC,MACC,OAAOtB,uCAAK;EAChB;EAEAoC,gBAAgBA,CAACC,YAAoB;IACnC,IAAI,CAAC7B,iBAAiB,CAAC8B,IAAI,CAACD,YAAY,CAAC;EAC3C;EAEAE,cAAcA,CAACF,YAAoB;IACjC,IAAI,CAACxB,eAAe,CAACyB,IAAI,CAACD,YAAY,CAAC;EACzC;EAEAG,gBAAgBA,CAACC,YAAoB;IACnC,IAAI,CAAC9B,iBAAiB,CAAC2B,IAAI,CAACG,YAAY,CAAC;EAC3C;;AAtEWrC,aAAa;mBAAbA,aAAa,EAAAsC,sDAAA,CAAAE,4DAAA;AAAA;AAAbxC,aAAa;SAAbA,aAAa;EAAA0C,OAAA,EAAb1C,aAAa,CAAA2C,IAAA;EAAAC,UAAA,EAFZ;AAAM","sources":["./src/app/core/services/movies.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, EMPTY, combineLatest, distinctUntilChanged, map, mergeMap, switchMap, tap } from 'rxjs';\nimport { IMovie, ISearchResponse, ISearchResult } from 'src/app/shared/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MoviesService {\n  // http://www.omdbapi.com/?i=tt3896198&apikey=e462cb12\n  // url = \"http://www.omdbapi.com/?i=tt3896198\";\n\n  // searchQuery: string = `hell`;\n  // pageNumber: number = 1;\n  baseUrl = `http://www.omdbapi.com`;\n  pageNumberSubject = new BehaviorSubject<number>(1);\n  pageNumberAction$ = this.pageNumberSubject.asObservable();\n\n  searchTextSubject = new BehaviorSubject<string>(\"ami\");\n  searchTextAction$ = this.searchTextSubject.asObservable();\n\n  pageSizeSubject = new BehaviorSubject<number>(10);\n  pageSizeAction$ = this.pageSizeSubject.asObservable();\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  pageParams$ = combineLatest([\n    this.pageNumberAction$,\n    this.searchTextAction$,\n    this.pageSizeAction$\n  ]).pipe(\n    map(([pageNumber, searchText, pageSize]) => ({ pageNumber, searchText, pageSize }))\n  );\n\n  searchResponse$ = combineLatest([\n    this.pageParams$\n  ]).pipe(\n    switchMap(([paramsObj]) => {\n      const url = `${this.baseUrl}/?s=${paramsObj.searchText}&page=${paramsObj.pageNumber}&pageSize=${paramsObj.pageSize}`;\n      return this.http.get<ISearchResponse>(url);\n    })\n  );\n\n  searchResponseSorted$ = this.searchResponse$.pipe(\n    map((resp) => ({\n      ...resp,\n      Search: resp.Search?.sort((a, b) => {\n        // Extract the year from each movie's Year property\n        const yearA = parseInt(a.Year, 10);\n        const yearB = parseInt(b.Year, 10);\n\n        // Sort in descending order (latest year first)\n        return yearB - yearA;\n      })\n    }) as ISearchResponse\n    )\n  )\n\n  getSelectedMovieDetails(selectedMovieId: string) {\n    if (selectedMovieId) {\n      const url = `${this.baseUrl}/?i=${selectedMovieId}`;\n      return this.http.get<ISearchResult>(url);\n    } else\n      return EMPTY;\n  }\n\n  updatePageNumber(selectedPage: number) {\n    this.pageNumberSubject.next(selectedPage);\n  }\n\n  updatePageSize(selectedPage: number) {\n    this.pageSizeSubject.next(selectedPage);\n  }\n\n  updateSearchText(selectedText: string) {\n    this.searchTextSubject.next(selectedText);\n  }\n\n}\n"],"names":["BehaviorSubject","EMPTY","combineLatest","map","switchMap","MoviesService","constructor","http","baseUrl","pageNumberSubject","pageNumberAction$","asObservable","searchTextSubject","searchTextAction$","pageSizeSubject","pageSizeAction$","pageParams$","pipe","pageNumber","searchText","pageSize","searchResponse$","paramsObj","url","get","searchResponseSorted$","resp","Search","sort","a","b","yearA","parseInt","Year","yearB","getSelectedMovieDetails","selectedMovieId","updatePageNumber","selectedPage","next","updatePageSize","updateSearchText","selectedText","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}